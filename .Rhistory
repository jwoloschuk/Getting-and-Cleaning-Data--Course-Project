y <- function (x){
x^2
}
c <- 5
y(c)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(X) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]), na.rm=TRUE)
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
log(-1)
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(5)
printmessage(-1)
printmessage(0)
printmessage(a)
View(printmessage)
View(printmessage)
View(printmessage)
View(printmessage)
printmessage(NA)
View(printmessage)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage2()
printmessage2()
x <- log(-1)
printmessage2(x)
options(error = recover)
read.csv("nosuchfile")
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum((flags$orange))
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colorrs, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(c(3,4,5,5,5,6,6), unique)
unique_vals <- lapply(flags), unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flag, unique)
sapply(flags, unique)
View(unique_vals)
lapply(unique_val, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
pwd
pwd()
pwd()
cd()
search(working directory)
pwd(print working directory)
library(swirl)
swirl()
ls(plants)
ls()
?ls
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants[1:10])
head(plants,x = 10)
head(plants, 10)
tail(15)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob = c(0.3,0.7))
flips <- sample(c(0,1),100, replacement = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1),100, prob = c(0.3,0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(10)
rpois(10,5)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot subtitle")
plot(cars, sub = "My Plot Subtitle")
?plot
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
?points
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot()
?boxplot
boxplot(formalula = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl::install_course("Advanced R Programming")
swirl()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
repo_list <- content(req)
repo_list
req
github_token
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
repo_list <- content(req)
repo_list
answer1 <- c()
for (i in 1:length(repo_list)){
repo <- repo_list[[i]]
if(repo$name == "datasharing"){
answer1 = repo
break
}
}
gtoken
github <- oauth_endpoints("github")
myapp
github_token
github_token <- oauth2.0_token(github, myapp)
github_token
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "760fa2d393497a3452203867270aafa90bf07e60")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- GET("http://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
json1 = content(req)
json1
> oauth_endpoints("github")
oauth_endpoints("github")
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "89a20590e6e7e0510cc2146aea8b26d5ed2721a4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Youtube_Michael_Galarnyk",
key = "8758a6bf9a146e1da0c1",
secret = "b9504edde46b794414495bd9c33ea28cbfd87824")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app(appname = "Week2Quiz", key = "d39b111aaae64dc2a9ff", secret = "89a20590e6e7e0510cc2146aea8b26d5ed2721a4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "89a20590e6e7e0510cc2146aea8b26d5ed2721a4", redirect_uri = "http://localhost:1410" )
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "d39b111aaae64dc2a9ff", secret = "578a8fbdffa67c339de72195c84e9d6f9f99f489", redirect_uri = "http://localhost:1410")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
json1 = content(req)
install.packages("httpuv")
install.packages("httr")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
parse(25081985)
parse("25081985")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 1, minutes = 34, seconds = 54)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Sinapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
llast_time
last_time
?interval
how_long <- intervale(last_time,arrive)
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
x <- c(1,2,3,4,5,6)
fasdfa
fag
getwd()
setwd("GitHub/Getting_and_Cleaning_Data-Course_Project")
setwd("GitHub/Getting_and_Cleaning_Data-Course_Project")
setwd(getwd)
setwd(getwd())
setwd("GitHub/Getting_and_Cleaning_Data-Course_Project")
setwd("GitHub\Getting_and_Cleaning_Data-Course_Project")
setwd("C:/Users/jordan.woloschuk/Documents/GitHub/Getting_and_Cleaning_Data-Course_Project")
getwd()
?dplyr
??dplyr
run_analysis.R
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
new_dir <- cat(getwd(),"/UCI HAR Dataset")
new_dir
dir <- getwd()
new_dir <- cat(dir,"/UCI HAR Dataset", sep = "")
setwd(new_dir)
new_dir
getwd()
setwd(..)
setwd(.)
setwd("..")
getwd()
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
getwd()
activities
activites
features
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
getwd()
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
x_test
dim(x_test)
length(features$functions)
head(subject_test)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
class(x_test)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
selected_DF <- select(total_DF, subject, ID, contains("mean"), contains("std"))
colnames(selected_DF)
head(selected_DF)
tail(selected_DF)
str(selected_DF)
selected_DF$ID <- activites_labels[selected_DF$ID,2]
selected_DF$ID
total_DF <- cbind(subject_DF,x_DF,y_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
head(selected_DF)
names(selected_DF$ID) = "Activity"
head(selected_DF)
colnames(selected_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(selected_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(selected_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(selected_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(selected_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(selected_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
Tidy_DF <- total_DF %>% group_by(Subject, Activity)
Tidy_DF <- total_DF %>% group_by(Subject, activity)
names(selected_DF)[2] = "Activity"
selected_DF$Activity
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(selected_DF)
selected_DF$Activity
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(selected_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(Tidy_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
colnames(Tidy_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
str(Tidy_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
str(Tidy_DF)
Tidy_DF$Activity_ID
colnames(Tidy_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
getwd()
setwd(...)
setwd("...")
getwd()
setwd("..")
getwd()
setwd("../..")
getwd()
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
getwd()
test <- read.table("FinalData.txt")
str(test)
str(Tidy_DF)
View(Tidy_DF)
View(Tidy_DF)
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
?require
require(dplyr)
require(dplyr)
setwd("../..")
source('~/GitHub/Getting_and_Cleaning_Data-Course_Project/run_analysis.R')
ls()
View(activites_labels)
View(activites_labels)
ls(activites_labels)
activites_labels$activity_type
View(features)
features$functions
View(Tidy_DF)
View(selected_DF)
View(subject_test)
View(subject_test)
View(x_test)
colnames(Tidy_DF)
